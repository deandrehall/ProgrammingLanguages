[Venkat 10/06/16 13:04 PM EEST]
synopsis: think about what you're doing 

details:                               
Please don't arbitrary change code. Take the review, and think about what is being said. When I say n should not be BigInt, that does mean we change randomly all BigInt to Int. Think about what we are working with and then write meaningful code. Don't rush, take time to write, review, think, and improve.

Scala: See notes in code.

Elixir: Arbitrary handling for input and throwing random exceptions. Please revisit and do what is needed for the problem at hand.

Ruby:
TC_MyTest class names do not have underscore in Ruby.

Please see notes in code.

------------------------------------------------------------------------------
[Venkat 10/05/16 22:56 PM EEST]
synopsis:  fix and move forward

details:
Scala: Please see notes in code.

Elixir: 
Please indent the code properly.

Test for a very large value, for regular recursion and tail recursion.
          
Move on to the next language.

------------------------------------------------------------------------------
[Venkat 10/04/16 15:51 PM EEST]
synopsis: take a close look at the test 

details:
Scala: is the test doing the right thing?

Elixir: 
Please indent the code properly.

Please move forward to the next function.

------------------------------------------------------------------------------
[Venkat 10/03/16 09:08 AM MDT]
synopsis: let's reduce code in Scala. Elixir, let's split the file 

details:
Scala:
tailFactorial: write a test for very large input value, say 100000.

Move recursion to the outer method, merging tailFactorial and recursion into one function. Scala has some nice facility for arguments to functions that will allow us to define two parameters, but only send one argument.

Elixir:
Use mix to run the test. Put test in the test directory and code in the lib directory.

Throw a good error message instead of n.
Indent code properly.

------------------------------------------------------------------------------
[Venkat 10/01/16 07:39 AM EDT]
synopsis: please move forward 

details:
Scala:
Please see notes in code.

Elixir:
Move the build file to the assign2/elixir directory.
Please proceed to the first function in this language.

------------------------------------------------------------------------------
[Venkat 09/30/16 06:21 AM EDT]
synopsis: the test should get us to the reality, not hide it 

details:
Scala:
assert(Factorial.tailFactorial(50, 1) == Factorial.tailFactorial(50,1))
This does not make sense. This says rubbish == rubbish. But, we don't want rubbish, we want a good result. So, we want

assert(Factorial.tailFactorial(50, 1) == goodresult)

In the code, do not use the word "return" to return values.

Also, let the function take one parameter, the position, instead of two.
In Scala use the @tailrec annotation for the tail recursion.

Elixir.

Provide a build file to run the tests.

------------------------------------------------------------------------------
[Venkat 09/29/16 11:03 AM EDT]
synopsis: fix and move forward to the next language 

details:
Write a test for both functions for an input of 50.

After fixing, please move forward to the next language.

------------------------------------------------------------------------------
[Venkat 09/28/16 22:14 PM EDT]
synopsis: good so far 

details:             
Please proceed to the next function.

------------------------------------------------------------------------------
[Venkat 09/27/16 04:45 AM EDT]
synopsis: please write code after writing test, not before 

details:                                                  
Write a test, then write minimum code to make that test pass.

> pwd
...najera_hall/assign2/Scala
> ./build.sh 
' could not be foundfactorial.scala
one error found
No such file or class on classpath: factorial
No such file or class on classpath: factorial
>

Let me fix the build for you so you can move forward. But, please ask for help to get things moving.

To run the code, cd to assign2/scala directory. Then type

gradlew

Please move forward to write test first for the recursive function, then implement the code. Write multiple tests for the recursive function, for number of 0, 1, 3, 5, 10, a large number, -1. Then write an exception test for a very large number. This exception test should pass if the function throws a stack overflow exception and fail otherwise.

------------------------------------------------------------------------------
[Venkat 09/26/16 03:07 AM MDT]
synopsis: start with a canary test 

details:                          
Start with a canary test. Use ScalaTest unit testing tool.
Create the test in the test directory. If you need help, please let me know.

------------------------------------------------------------------------------
[Venkat 09/25/16 05:11 AM MDT]
synopsis: Please ensure that the tests are actually running. 

details:
Please ensure that the tests are actually running.

> ./build.sh 

...
Ran 0 tests in 0.000s

OK
>

Notice the 0 tests message. One way to ensure this would be to 
change the True to False in the canary test and see if the test fails.

Write the test in a test directory and the source code (eventually) in the src directory.

Once you have the canary test working, move on to testing the regular recursion.

You may also want to do a quick prototype to verify if Python supports
TCO natively (without any external modules).

------------------------------------------------------------------------------
Scala: ...
Elixir: ...
: