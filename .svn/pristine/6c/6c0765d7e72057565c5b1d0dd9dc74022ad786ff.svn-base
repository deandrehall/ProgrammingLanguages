Assign2 Due 11:59PM October 7

In this assignment we will write unit tests. You may pick any tools you like to write the unit tests, depending on the languages you are using. Start with a canary test.

A canary test is a silly test that asserts that true is true. This helps us to know that the environment, tools, and build files are setup properly.

For example, for Java, a canary test would look like this:

@Test
public void canaryTest() {
  assertTrue(true);
}                  

Now to the problem at hand.

Pick three languages that natively support (not through extensions) tail recursion. At least one of the languages you pick has to be statically typed and at least one has to be dynamically typed.

We will write functions that return the factorial of a given number. Given a number n, where n >= 0, the factorial is 1 if n == 0, otherwise, it is 1 * 2 * 3 * ... n.

Written as a recursion, we can say factorial(n) is n * factorial(n - 1).

Implement a function to compute factorial using:

1. regular recursion

2. tail recursion

Provide automated build script to run the tests.

For those of you who use reviews: 
Please start with one language and the canary test in it. Then work on the regular recursion, with a series of tests. Then work on the tail recursion. After we finish one language we will move on to the next language.

Total [100]: 95

Language 1: Scala
Build runs, all tests pass, and are sufficient [10]:
Regular recursion [10]:
Tail recursion [10]:

Language 2: Elixir
Build runs, all tests pass, and are sufficient [10]: -5
Why are we expecting an exception for large value in the TCO version.
There should be no raise within the exception tests.

Regular recursion [10]:
Tail recursion [10]:

Language 3: Ruby
Build runs, all tests pass, and are sufficient [10]:
Regular recursion [10]:
Tail recursion [10]:

Overall quality [10]:
